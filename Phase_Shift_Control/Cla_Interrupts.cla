#include "F28x_Project.h"
#include "Cla_Interrupts.h"
#include "user_def.h"
Cla_Evag EVAG_N1;
Cla_Control_N CnlVar_N1;

Uint16 phase_shift_int;
float phase_shift;
float phase_shift_raw;
float phase_shift_last;
float iref_last;
float io_last;
float io_raw;
float PartP;
float PartI;

__attribute__((interrupt)) void claTask1(void)
{
        Cla_Avg_Run(&EVAG_N1);

        if(EPwm4Regs.CMPB.bit.CMPB  > EPwm4Regs.TBCTR &&(!Prt_flag))//pulse output
        {
            __meallow();
            EPwm2Regs.TZFRC.bit.OST = 1;
            EPwm1Regs.TZFRC.bit.OST = 1;
            __medis();
        }
        else if(!Prt_flag)
        {
            __meallow();
            EPwm2Regs.TZCLR.bit.OST = 1;
            EPwm1Regs.TZCLR.bit.OST = 1;
            __medis();
//            io_raw = 21.4634f*AdcaResultRegs.ADCRESULT3;
//            EVAG_N1.out     = (io_raw - EVAG_N1.out)*EVAG_N1.mult + EVAG_N1.out*(1.0f-EVAG_N1.mult);
//            AdcaRegs.ADCINTFLGCLR.bit.ADCINT1 = 1;
        }

        else
        {

        }

}
__attribute__((interrupt)) void claTask2(void)
{
    //PI Tustin Discretization: y = (Kp + Ki/s)*u = (Kp + Ki*T/2*(1+Z^-1)/(1-Z^-1))*u
    io    = EVAG_N1.out;
    PartP = Kp*(iref-io*0.0004577f) - Kp*(iref_last-io_last*0.0004577f);
    PartI = Ki*Tpulse/2.0*(iref-io*0.0004577f) + Ki*Tpulse/2.0*(iref_last-io_last*0.0004577f);

    phase_shift_raw = PartP + PartI + phase_shift_last;

    if (phase_shift_raw < CnlVar_N1.umin)
    {
        phase_shift = CnlVar_N1.umin;
    }
    else if (phase_shift_raw > CnlVar_N1.umax)
    {
        phase_shift = CnlVar_N1.umax;
    }
    else
    {
        phase_shift = phase_shift_raw;
    }

    phase_shift_int =  (Uint16)(phase_shift*256*(McuClk/Fs/1000));

    EPwm2Regs.TBPHS.bit.TBPHS = phase_shift_int >> 8;
    EPwm2Regs.TBPHS.bit.TBPHSHR =  (Uint16)((0xFF - ((Uint16)phase_shift_int >> 8)) << 8);
    EPwm4Regs.ETCLR.bit.INT = 1;

    phase_shift_last = phase_shift;
    iref_last = iref;
    io_last = io;
}
__attribute__((interrupt)) void claTask3(void)
{

}
__attribute__((interrupt)) void claTask4(void)
{

}
__attribute__((interrupt)) void claTask5(void)
{

}
__attribute__((interrupt)) void claTask6(void)
{

}
__attribute__((interrupt)) void claTask7(void)
{

    EVAG_N1.mult = 0.003f;
    EVAG_N1.mult2 = 1.0f - EVAG_N1.mult;
    EVAG_N1.out  = 0.0f;
    //PI Tustin Discretization: y = (Kp + Ki/s)*u = (Kp + Ki*T/2*(1+Z^-1)/(1-Z^-1))*u

    CnlVar_N1.a1 = 1.0f;
    CnlVar_N1.ek1 = 0.0f;
    CnlVar_N1.uk1 = 0.0f;
    CnlVar_N1.umax = 0.48f;
    CnlVar_N1.umin = 0.00f;

    phase_shift = 0.0f;
    phase_shift_last = 0.0f;
    phase_shift_int = 0;
    iref_last = 0.0f;
    io_last = 0.0f;
    PartP = 0.0f;
    PartI = 0.0f;
}
__attribute__((interrupt)) void claTask8(void)
{

}


